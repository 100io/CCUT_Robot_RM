ARM GAS  C:\User\Default\ccIavh5J.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"freertos.c"
  16              		.section	.rodata.str1.4,"aMS",%progbits,1
  17              		.align	2
  18              	.LC0:
  19 0000 64656661 		.ascii	"defaultTask\000"
  19      756C7454 
  19      61736B00 
  20              		.align	2
  21              	.LC2:
  22 000c 52435F63 		.ascii	"RC_control\000"
  22      6F6E7472 
  22      6F6C00
  23              		.text
  24              	.Ltext0:
  25              		.cfi_sections	.debug_frame
  26              		.section	.text.StartDefaultTask,"ax",%progbits
  27              		.align	1
  28              		.global	StartDefaultTask
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  33              	StartDefaultTask:
  34              	.LFB141:
  35              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
ARM GAS  C:\User\Default\ccIavh5J.s 			page 2


  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** /* USER CODE END Includes */
  30:Core/Src/freertos.c **** 
  31:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* USER CODE END PTD */
  35:Core/Src/freertos.c **** 
  36:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* USER CODE END PD */
  40:Core/Src/freertos.c **** 
  41:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* USER CODE END PM */
  45:Core/Src/freertos.c **** 
  46:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* USER CODE END Variables */
  50:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  51:Core/Src/freertos.c **** osThreadId RC_controlHandle;
  52:Core/Src/freertos.c **** 
  53:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  54:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  55:Core/Src/freertos.c **** 
  56:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  57:Core/Src/freertos.c **** 
  58:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  59:Core/Src/freertos.c **** extern void RC_task(void const * argument);
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  62:Core/Src/freertos.c **** 
  63:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  64:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  65:Core/Src/freertos.c **** 
  66:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  67:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  68:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  69:Core/Src/freertos.c **** 
  70:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  71:Core/Src/freertos.c **** {
  72:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  73:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  74:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  75:Core/Src/freertos.c ****   /* place for user code */
  76:Core/Src/freertos.c **** }
ARM GAS  C:\User\Default\ccIavh5J.s 			page 3


  77:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  78:Core/Src/freertos.c **** 
  79:Core/Src/freertos.c **** /**
  80:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  81:Core/Src/freertos.c ****   * @param  None
  82:Core/Src/freertos.c ****   * @retval None
  83:Core/Src/freertos.c ****   */
  84:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  85:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c ****   /* USER CODE END Init */
  88:Core/Src/freertos.c **** 
  89:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  90:Core/Src/freertos.c ****   /* add mutexes, ... */
  91:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  92:Core/Src/freertos.c **** 
  93:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  94:Core/Src/freertos.c ****   /* add semaphores, ... */
  95:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
  96:Core/Src/freertos.c **** 
  97:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
  98:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
  99:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 100:Core/Src/freertos.c **** 
 101:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 102:Core/Src/freertos.c ****   /* add queues, ... */
 103:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 104:Core/Src/freertos.c **** 
 105:Core/Src/freertos.c ****   /* Create the thread(s) */
 106:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 107:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 108:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 109:Core/Src/freertos.c **** 
 110:Core/Src/freertos.c ****   /* definition and creation of RC_control */
 111:Core/Src/freertos.c ****   osThreadDef(RC_control, RC_task, osPriorityHigh, 0, 128);
 112:Core/Src/freertos.c ****   RC_controlHandle = osThreadCreate(osThread(RC_control), NULL);
 113:Core/Src/freertos.c **** 
 114:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 115:Core/Src/freertos.c ****   /* add threads, ... */
 116:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 117:Core/Src/freertos.c **** 
 118:Core/Src/freertos.c **** }
 119:Core/Src/freertos.c **** 
 120:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 121:Core/Src/freertos.c **** /**
 122:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 123:Core/Src/freertos.c ****   * @param  argument: Not used
 124:Core/Src/freertos.c ****   * @retval None
 125:Core/Src/freertos.c ****   */
 126:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 127:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 128:Core/Src/freertos.c **** {
  36              		.loc 1 128 1 view -0
  37              		.cfi_startproc
  38              		@ Volatile: function does not return.
  39              		@ args = 0, pretend = 0, frame = 0
  40              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\User\Default\ccIavh5J.s 			page 4


  41              	.LVL0:
  42              		.loc 1 128 1 is_stmt 0 view .LVU1
  43 0000 08B5     		push	{r3, lr}
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 3, -8
  47              		.cfi_offset 14, -4
  48              	.LVL1:
  49              	.L2:
 129:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 130:Core/Src/freertos.c ****   /* Infinite loop */
 131:Core/Src/freertos.c ****   for(;;)
  50              		.loc 1 131 3 is_stmt 1 discriminator 1 view .LVU2
 132:Core/Src/freertos.c ****   {
 133:Core/Src/freertos.c ****     osDelay(1);
  51              		.loc 1 133 5 discriminator 1 view .LVU3
  52 0002 0120     		movs	r0, #1
  53 0004 FFF7FEFF 		bl	osDelay
  54              	.LVL2:
 131:Core/Src/freertos.c ****   {
  55              		.loc 1 131 8 discriminator 1 view .LVU4
  56 0008 FBE7     		b	.L2
  57              		.cfi_endproc
  58              	.LFE141:
  60              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  61              		.align	1
  62              		.global	vApplicationGetIdleTaskMemory
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  67              	vApplicationGetIdleTaskMemory:
  68              	.LVL3:
  69              	.LFB139:
  71:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  70              		.loc 1 71 1 view -0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  72:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  75              		.loc 1 72 3 view .LVU6
  72:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  76              		.loc 1 72 25 is_stmt 0 view .LVU7
  77 0000 034B     		ldr	r3, .L5
  78 0002 0360     		str	r3, [r0]
  73:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  79              		.loc 1 73 3 is_stmt 1 view .LVU8
  73:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  80              		.loc 1 73 27 is_stmt 0 view .LVU9
  81 0004 034B     		ldr	r3, .L5+4
  82 0006 0B60     		str	r3, [r1]
  74:Core/Src/freertos.c ****   /* place for user code */
  83              		.loc 1 74 3 is_stmt 1 view .LVU10
  74:Core/Src/freertos.c ****   /* place for user code */
  84              		.loc 1 74 25 is_stmt 0 view .LVU11
  85 0008 8023     		movs	r3, #128
  86 000a 1360     		str	r3, [r2]
ARM GAS  C:\User\Default\ccIavh5J.s 			page 5


  76:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  87              		.loc 1 76 1 view .LVU12
  88 000c 7047     		bx	lr
  89              	.L6:
  90 000e 00BF     		.align	2
  91              	.L5:
  92 0010 00000000 		.word	.LANCHOR0
  93 0014 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE139:
  97              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
  98              		.align	1
  99              		.global	MX_FREERTOS_Init
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 104              	MX_FREERTOS_Init:
 105              	.LFB140:
  84:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 106              		.loc 1 84 29 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 56
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110 0000 10B5     		push	{r4, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 4, -8
 114              		.cfi_offset 14, -4
 115 0002 8EB0     		sub	sp, sp, #56
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 64
 107:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 118              		.loc 1 107 3 view .LVU14
 119 0004 124C     		ldr	r4, .L9
 120 0006 0DF11C0C 		add	ip, sp, #28
 121 000a A646     		mov	lr, r4
 122 000c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 123 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 124 0014 9EE80700 		ldm	lr, {r0, r1, r2}
 125 0018 8CE80700 		stm	ip, {r0, r1, r2}
 108:Core/Src/freertos.c **** 
 126              		.loc 1 108 3 view .LVU15
 108:Core/Src/freertos.c **** 
 127              		.loc 1 108 23 is_stmt 0 view .LVU16
 128 001c 0021     		movs	r1, #0
 129 001e 07A8     		add	r0, sp, #28
 130 0020 FFF7FEFF 		bl	osThreadCreate
 131              	.LVL4:
 108:Core/Src/freertos.c **** 
 132              		.loc 1 108 21 view .LVU17
 133 0024 0B4B     		ldr	r3, .L9+4
 134 0026 1860     		str	r0, [r3]
 111:Core/Src/freertos.c ****   RC_controlHandle = osThreadCreate(osThread(RC_control), NULL);
 135              		.loc 1 111 3 is_stmt 1 view .LVU18
 136 0028 EE46     		mov	lr, sp
 137 002a 04F11C0C 		add	ip, r4, #28
 138 002e BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
ARM GAS  C:\User\Default\ccIavh5J.s 			page 6


 139 0032 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 140 0036 9CE80700 		ldm	ip, {r0, r1, r2}
 141 003a 8EE80700 		stm	lr, {r0, r1, r2}
 112:Core/Src/freertos.c **** 
 142              		.loc 1 112 3 view .LVU19
 112:Core/Src/freertos.c **** 
 143              		.loc 1 112 22 is_stmt 0 view .LVU20
 144 003e 0021     		movs	r1, #0
 145 0040 6846     		mov	r0, sp
 146 0042 FFF7FEFF 		bl	osThreadCreate
 147              	.LVL5:
 112:Core/Src/freertos.c **** 
 148              		.loc 1 112 20 view .LVU21
 149 0046 044B     		ldr	r3, .L9+8
 150 0048 1860     		str	r0, [r3]
 118:Core/Src/freertos.c **** 
 151              		.loc 1 118 1 view .LVU22
 152 004a 0EB0     		add	sp, sp, #56
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155              		@ sp needed
 156 004c 10BD     		pop	{r4, pc}
 157              	.L10:
 158 004e 00BF     		.align	2
 159              	.L9:
 160 0050 00000000 		.word	.LANCHOR2
 161 0054 00000000 		.word	.LANCHOR3
 162 0058 00000000 		.word	.LANCHOR4
 163              		.cfi_endproc
 164              	.LFE140:
 166              		.global	RC_controlHandle
 167              		.global	defaultTaskHandle
 168              		.section	.rodata
 169              		.align	2
 170              		.set	.LANCHOR2,. + 0
 171              	.LC4:
 172 0000 00000000 		.word	.LC0
 173 0004 00000000 		.word	StartDefaultTask
 174 0008 0000     		.short	0
 175 000a 0000     		.space	2
 176 000c 00000000 		.word	0
 177 0010 80000000 		.word	128
 178 0014 00000000 		.word	0
 179 0018 00000000 		.word	0
 180              	.LC5:
 181 001c 0C000000 		.word	.LC2
 182 0020 00000000 		.word	RC_task
 183 0024 0200     		.short	2
 184 0026 0000     		.space	2
 185 0028 00000000 		.word	0
 186 002c 80000000 		.word	128
 187 0030 00000000 		.word	0
 188 0034 00000000 		.word	0
 189              		.section	.bss.RC_controlHandle,"aw",%nobits
 190              		.align	2
 191              		.set	.LANCHOR4,. + 0
 194              	RC_controlHandle:
ARM GAS  C:\User\Default\ccIavh5J.s 			page 7


 195 0000 00000000 		.space	4
 196              		.section	.bss.defaultTaskHandle,"aw",%nobits
 197              		.align	2
 198              		.set	.LANCHOR3,. + 0
 201              	defaultTaskHandle:
 202 0000 00000000 		.space	4
 203              		.section	.bss.xIdleStack,"aw",%nobits
 204              		.align	2
 205              		.set	.LANCHOR1,. + 0
 208              	xIdleStack:
 209 0000 00000000 		.space	512
 209      00000000 
 209      00000000 
 209      00000000 
 209      00000000 
 210              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 211              		.align	2
 212              		.set	.LANCHOR0,. + 0
 215              	xIdleTaskTCBBuffer:
 216 0000 00000000 		.space	84
 216      00000000 
 216      00000000 
 216      00000000 
 216      00000000 
 217              		.text
 218              	.Letext0:
 219              		.file 2 "e:\\arm-gnu\\arm\\arm-none-eabi\\include\\machine\\_default_types.h"
 220              		.file 3 "e:\\arm-gnu\\arm\\arm-none-eabi\\include\\sys\\_stdint.h"
 221              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 222              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 223              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 224              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  C:\User\Default\ccIavh5J.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\User\Default\ccIavh5J.s:17     .rodata.str1.4:00000000 $d
C:\User\Default\ccIavh5J.s:27     .text.StartDefaultTask:00000000 $t
C:\User\Default\ccIavh5J.s:33     .text.StartDefaultTask:00000000 StartDefaultTask
C:\User\Default\ccIavh5J.s:61     .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\User\Default\ccIavh5J.s:67     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\User\Default\ccIavh5J.s:92     .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\User\Default\ccIavh5J.s:98     .text.MX_FREERTOS_Init:00000000 $t
C:\User\Default\ccIavh5J.s:104    .text.MX_FREERTOS_Init:00000000 MX_FREERTOS_Init
C:\User\Default\ccIavh5J.s:160    .text.MX_FREERTOS_Init:00000050 $d
C:\User\Default\ccIavh5J.s:194    .bss.RC_controlHandle:00000000 RC_controlHandle
C:\User\Default\ccIavh5J.s:201    .bss.defaultTaskHandle:00000000 defaultTaskHandle
C:\User\Default\ccIavh5J.s:169    .rodata:00000000 $d
C:\User\Default\ccIavh5J.s:190    .bss.RC_controlHandle:00000000 $d
C:\User\Default\ccIavh5J.s:197    .bss.defaultTaskHandle:00000000 $d
C:\User\Default\ccIavh5J.s:204    .bss.xIdleStack:00000000 $d
C:\User\Default\ccIavh5J.s:208    .bss.xIdleStack:00000000 xIdleStack
C:\User\Default\ccIavh5J.s:211    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\User\Default\ccIavh5J.s:215    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer

UNDEFINED SYMBOLS
osDelay
osThreadCreate
RC_task
